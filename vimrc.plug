call plug#begin('~/.vim/plugged')
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', {'branch' : 'stable'}
"Plug 'ludovicchabant/vim-gutentags'
Plug 'mileszs/ack.vim'
Plug 'skywind3000/asyncrun.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'rhysd/conflict-marker.vim'
Plug 'tacahiroy/ctrlp-funky'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'powerline/fonts'
Plug 'mattn/gist-vim'
Plug 'Yggdroot/indentLine'
Plug 'vim-scripts/matchit.zip'
Plug 'scrooloose/nerdcommenter'
Plug 'luochen1990/rainbow'
Plug 'vim-scripts/restore_view.vim'
Plug 'saltstack/salt-vim'
Plug 'vim-scripts/sessionman.vim'
Plug 'scrooloose/syntastic'
Plug 'godlygeek/tabular'
Plug 'Yggdroot/LeaderF'
Plug 'SirVer/ultisnips'
Plug 'mbbill/undotree'
Plug 'tpope/vim-abolish'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'bling/vim-bufferline'
Plug 'spf13/vim-colors'
Plug 'altercation/vim-colors-solarized'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-commentary'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'tpope/vim-cucumber'
Plug 'quentindecock/vim-cucumber-align-pipes'
Plug 'easymotion/vim-easymotion'
Plug 'kristijanhusak/defx-icons'
Plug 'fatih/vim-go'
Plug 'elzr/vim-json'
Plug 'reedes/vim-litecorrect'
Plug 'tpope/vim-markdown'
Plug 'terryma/vim-multiple-cursors'
Plug 'osyo-manga/vim-over'
Plug 'spf13/vim-preview'
Plug 'tpope/vim-repeat'
Plug 'mhinz/vim-signify'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
Plug 'kana/vim-textobj-indent'
Plug 'reedes/vim-textobj-quote'
Plug 'reedes/vim-textobj-sentence'
Plug 'kana/vim-textobj-user'
Plug 'cespare/vim-toml'
Plug 'reedes/vim-wordy'
Plug 'avakhov/vim-yaml'
Plug 'gcmt/wildfire.vim'
if has('nvim')
    Plug 'Shougo/defx.nvim', {'do' : ':UpdateRemotePlugins'}
else
    Plug 'Shougo/defx.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif
call plug#end()

"YouCompleteMe Config Sections
let g:ycm_confirm_extra_conf = 0
let g:ycm_use_clangd = "Never"
let g:acp_enableAtStartup = 0
let g:ycm_ad_preview_to_completeopt = 0
let g:ycm_show_diagnostitcs_ui = 0
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings = 1
set completeopt=menu,menuone
let g:ycm_key_invoke_completion = '<C-x>'
"let g:ycm_filetype_whitelist = {
            "\ "c" : 1,
            "\ "cpp" : 1,
            "\ "go" : 1,
            "\}

let g:ycm_semantic_triggers = {
            \ 'c, cpp, python, go, lua' : ['re!\w{2}'],
            \}

let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-n>'
let g:UltiSnipsJumpBackwardTrigger = '<C-p>'

noremap <leader>jg :YcmCompleter GoTo<CR>
noremap <leader>jd :YcmCompleter GoToDeclaration<CR>
noremap <leader>jdd :YcmCompleter GoToDefinition<CR>
noremap <leader>ji :YcmCompleter GoToInclude<CR>

if !executable("ghcmod")
    autocmd BufWritePost *.hs GhcModCheckAndLintAsync
endif

let $GTAGSLABEL = 'native-pygments'
let $GTAGSCONF = '/usr/local/share/gtags/gtags.conf'

"tags
"let g:gutentags_define_advanced_commands=1
"let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
"let g:gutentags_ctags_tagfile = '.tags'
"
"let g:gutentags_modules = []
"if executable('ctags')
"    let g:gutentags_modules += ['ctags']
"endif
"if executable('gtags') && executable('gtags-cscope')
"    let g:gutentags_modules += ['gtags_cscope']
"endif
"
"let s:vim_tags = expand('~/.cache/tags')
"let g:gutentags_cache_dir = s:vim_tags
"
"let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
"let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
"let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
"let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
"
"if !isdirectory(s:vim_tags)
"    silent! call mkdir(s:vim_tags, 'p')
"endif


"Rainbow parentheses
let g:rainbow_conf = {
            \	'guifgs': ['royalblue3', 'seagreen3', 'darkorange3', 'firebrick3'],
            \	'ctermfgs': ['brown', 'Darkblue', 'darkgray', 'darkgreen', 'darkcyan', 'darkred', 'darkmagenta', 'brown', 'gray', 'black', 'darkmagenta', 'Darkblue', 'darkgreen', 'darkcyan', 'darkred', 'red'],
            \	'operators': '_,_',
            \	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \	'separately': {
            \		'*': {},
            \		'tex': {
            \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \		},
            \		'lisp': {
            \			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \		},
            \		'vim': {
            \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \		},
            \		'html': {
            \			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \		},
            \		'css': 0,
            \	}
            \}

let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle


"UndoTree
nnoremap <Leader>u :UndotreeToggle<CR>
" If undotree is opened, it is likely one wants to interact with it.
let g:undotree_SetFocusWhenToggle=1

"Airline
if !exists('g:airline_theme')
    let g:airline_theme = 'solarized'
endif
if !exists('g:airline_powerline_fonts')
    " Use the default set of separators with a few customizations
    let g:airline_left_sep='›'  " Slightly fancier than '>'
    let g:airline_right_sep='‹' " Slightly fancier than '<'
endif

"Tabularize 
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
nmap <Leader>a=> :Tabularize /=><CR>
vmap <Leader>a=> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR> vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

"GoLang
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
au FileType go nmap <Leader>im <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>re <Plug>(go-rename)
au FileType go nmap <leader>ru <Plug>(go-run)
au FileType go nmap <leader>bu <Plug>(go-build)
au FileType go nmap <leader>te <Plug>(go-test)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <leader>co <Plug>(go-coverage)

"Folding
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>

"async run
let g:asyncrun_open = 6
let g:asyncrun_bell = 1
nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>

let g:airline_theme = 'base16_gruvbox_dark_hard'
let g:Lf_RootMarkers = ['.git', '.svn', '.root']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline"  }
let g:Lf_WindowPosition = 'popup'
let g:Lf_WindowHeight= 0.3
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_PreviewInPopup = 1
let g:Lf_PreviewCode = 1

noremap <F2> :LeaderfFunction!<cr>
noremap <F3> :LeaderfFunction<cr>
noremap <leader>fr :Leaderf rg<cr>
noremap <leader>ft :Leaderf gtags --result=ctags-x<cr>


call defx#custom#option('_', {
      \ 'winwidth': 30,
      \ 'split': 'vertical',
      \ 'direction': 'botright',
      \ 'show_ignored_files': 0,
      \ 'buffer_name': '',
      \ 'toggle': 1,
      \ 'resume': 1,
	  \ 'columns': "mark:indent:icons:filename:type"
      \ })


map <silent><C-e> :Defx<cr>
autocmd FileType defx match ExtraWhitespace /^^/
autocmd FileType defx call s:defx_mapping()

function! s:defx_mapping() abort
    IndentLinesDisable
    setl nospell
    setl signcolumn=no
    setl nonumber
    nnoremap <silent><buffer><expr> <CR>
    \ defx#is_directory() ?
    \ defx#do_action('open_or_close_tree') : 
    \ defx#do_action('drop')

    nnoremap <silent><buffer><expr> <2-LeftMouse>
    \ defx#is_directory() ?
    \ defx#do_action('open_or_close_tree') : 
    \ defx#do_action('drop')

	nnoremap <silent><buffer><expr> s defx#do_action('drop', 'split')
	nnoremap <silent><buffer><expr> v defx#do_action('drop', 'vsplit')
	nnoremap <silent><buffer><expr> t defx#do_action('drop', 'tabe')
	nnoremap <silent><buffer><expr> o defx#do_action('open_tree')
	nnoremap <silent><buffer><expr> O defx#do_action('open_tree_recursive')
	nnoremap <silent><buffer><expr> C defx#do_action('copy')
	nnoremap <silent><buffer><expr> P defx#do_action('paste')
	nnoremap <silent><buffer><expr> M defx#do_action('rename')
	nnoremap <silent><buffer><expr> D defx#do_action('remove_trash')
	nnoremap <silent><buffer><expr> A defx#do_action('new_multiple_files')
	nnoremap <silent><buffer><expr> U defx#do_action('cd', ['..'])
	nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
	nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select')
	nnoremap <silent><buffer><expr> R defx#do_action('redraw')
endfunction
